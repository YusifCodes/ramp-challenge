{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuska\\\\Downloads\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        // when loadAllTransactions is called a isLoading state variable is set to true in the begining, and to false after all the async functions in the end\n        // part1\n        // the employeeUtils.fetchAll() returns faster than paginatedTransactionsUtils.fetchAll()\n        // so we need to monitor the employees array and not the isLoading state variable, which will be set to false only after the paginatedTransactionsUtils.fetchAll() returns\n        // part 2\n        // when we call loadAllTransactions by pressing view more, since we are not dependent on the isLoading variable anymore, but on the fact that employees array is popualted, our employees filter list stays the same\n        isLoading: employees === null,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          // when the app starts, a useEffect in line 40 calls loadAllTransactions, because the employees object gets populated, so initially everything loads in okay\n          // in line 63 there is an onchange event that fires when another employee is selected in the dropdown list\n\n          if (newValue.id != \"\") {\n            // if you do not check for id, this function which requires and id fires, because of onChange event, and we get an error\n            // so we check for id and fire it only if a particular employee is selected\n\n            await loadTransactionsByEmployee(newValue.id);\n          } else if (newValue.id === \"\" && newValue.firstName === \"All\") {\n            // in this case we check if the user selected \"All employees\" in the dropdown, and fire this function which loads in all of the transactions\n\n            loadAllTransactions();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            // additional protection from an html edit, allows to fetch new transaction only if the nexpage is present\n            if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) != null) {\n              await loadAllTransactions();\n            }\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yXHk/2qvl++XLkP2SZkJsf+Vph0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","_ref","_paginatedTransaction","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","disabled","onClick","nextPage","_c","$RefreshReg$"],"sources":["C:/Users/Yuska/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  \n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    \n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          // when loadAllTransactions is called a isLoading state variable is set to true in the begining, and to false after all the async functions in the end\n          // part1\n          // the employeeUtils.fetchAll() returns faster than paginatedTransactionsUtils.fetchAll()\n          // so we need to monitor the employees array and not the isLoading state variable, which will be set to false only after the paginatedTransactionsUtils.fetchAll() returns\n          // part 2\n          // when we call loadAllTransactions by pressing view more, since we are not dependent on the isLoading variable anymore, but on the fact that employees array is popualted, our employees filter list stays the same\n          isLoading={employees === null}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            \n            if (newValue === null) {\n              return\n            }\n\n            // when the app starts, a useEffect in line 40 calls loadAllTransactions, because the employees object gets populated, so initially everything loads in okay\n            // in line 63 there is an onchange event that fires when another employee is selected in the dropdown list\n\n            if(newValue.id != \"\"){  \n\n              // if you do not check for id, this function which requires and id fires, because of onChange event, and we get an error\n              // so we check for id and fire it only if a particular employee is selected\n\n              await loadTransactionsByEmployee(newValue.id)\n\n            }else if (newValue.id === \"\" && newValue.firstName === \"All\") {\n\n              // in this case we check if the user selected \"All employees\" in the dropdown, and fire this function which loads in all of the transactions\n\n              loadAllTransactions()\n\n            }\n\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading }\n              onClick={async () => {\n                // additional protection from an html edit, allows to fetch new transaction only if the nexpage is present\n                if(paginatedTransactions?.nextPage != null){\n                  await loadAllTransactions()\n                }\n\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}