{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuska\\\\Downloads\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllEmployees = useCallback(async () => {\n    console.log(\"i got called\");\n    setIsLoading(true);\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    console.log(tran);\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllEmployees();\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          // when the app starts, a useEffect in line 40 calls loadAllTransactions, because the employees object gets populated, so initially everything loads in okay\n          // in line 63 there is an onchange event that fires when another employee is selected in the dropdown list\n\n          if (newValue.id != \"\") {\n            // if you do not check for id, this function which requires and id fires, because of onChange event, and we get an error\n            // so we check for id and fire it only if a particular employee is selected\n\n            await loadTransactionsByEmployee(newValue.id);\n          } else if (newValue.id === \"\" && newValue.firstName === \"All\") {\n            // in this case we check if the user selected \"All employees\" in the dropdown, and fire this function which loads in all of the transactions\n\n            loadAllTransactions();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\"\n          // disable button if next page is null\n          ,\n          disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null,\n          onClick: async () => {\n            // protection from an html edit, allows to fetch new transaction only if the nexpage is present\n            if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) != null) {\n              await loadAllTransactions();\n            }\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6WZzKVIkmj+UeQInDBQROn1EKR4=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","_ref","_paginatedTransaction","loadAllEmployees","console","log","fetchAll","loadAllTransactions","invalidateData","tran","loadTransactionsByEmployee","employeeId","fetchById","loading","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","disabled","nextPage","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Yuska/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllEmployees = useCallback(async () => {\n    console.log(\"i got called\")\n    setIsLoading(true)\n\n    await employeeUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    console.log(tran)\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllEmployees()\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            // when the app starts, a useEffect in line 40 calls loadAllTransactions, because the employees object gets populated, so initially everything loads in okay\n            // in line 63 there is an onchange event that fires when another employee is selected in the dropdown list\n\n            if(newValue.id != \"\"){  \n\n              // if you do not check for id, this function which requires and id fires, because of onChange event, and we get an error\n              // so we check for id and fire it only if a particular employee is selected\n\n              await loadTransactionsByEmployee(newValue.id)\n\n            }else if (newValue.id === \"\" && newValue.firstName === \"All\") {\n\n              // in this case we check if the user selected \"All employees\" in the dropdown, and fire this function which loads in all of the transactions\n\n              loadAllTransactions()\n            }\n\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              // disable button if next page is null\n              disabled={paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage === null}\n              onClick={async () => {\n                // protection from an html edit, allows to fetch new transaction only if the nexpage is present\n                if(paginatedTransactions?.nextPage != null){\n                  await loadAllTransactions()\n                }\n\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}