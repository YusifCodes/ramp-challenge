{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuska\\\\Downloads\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\components\\\\Transactions\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    clearCache,\n    loading\n  } = useCustomFetch();\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    });\n    // a call to a paginatedTransactions or transactionsByEmployee saves values in cache, so everytime we change the \"approved\" value by calling setTransactionApproval we need to clear the cache, so the data with the updated value loads in instead of cached value\n    await clearCache();\n  }, [fetchWithoutCache]);\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"/aM2QXcZUq2F2f0o4dEFjBmgEbc=\", false, function () {\n  return [useCustomFetch];\n});\n_c = Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useCustomFetch","TransactionPane","jsxDEV","_jsxDEV","Transactions","_ref","_s","transactions","fetchWithoutCache","clearCache","loading","setTransactionApproval","_ref2","transactionId","newValue","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","transaction","id","_c","$RefreshReg$"],"sources":["C:/Users/Yuska/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback } from \"react\"\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\"\nimport { SetTransactionApprovalParams } from \"src/utils/types\"\nimport { TransactionPane } from \"./TransactionPane\"\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\"\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, clearCache, loading } = useCustomFetch()\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n\n    \n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      })\n      // a call to a paginatedTransactions or transactionsByEmployee saves values in cache, so everytime we change the \"approved\" value by calling setTransactionApproval we need to clear the cache, so the data with the updated value loads in instead of cached value\n      await clearCache()\n    },\n    [fetchWithoutCache]\n  )\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,SAASC,eAAe,QAAQ,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGnD,OAAO,MAAMC,YAAmC,GAAGC,IAAA,IAAsB;EAAAC,EAAA;EAAA,IAArB;IAAEC;EAAa,CAAC,GAAAF,IAAA;EAClE,MAAM;IAAEG,iBAAiB;IAAEC,UAAU;IAAEC;EAAQ,CAAC,GAAGV,cAAc,CAAC,CAAC;EAEnE,MAAMW,sBAAsB,GAAGZ,WAAW,CAGxC,MAAAa,KAAA,IAAuC;IAAA,IAAhC;MAAEC,aAAa;MAAEC;IAAS,CAAC,GAAAF,KAAA;IAChC,MAAMJ,iBAAiB,CAAqC,wBAAwB,EAAE;MACpFK,aAAa;MACbE,KAAK,EAAED;IACT,CAAC,CAAC;IACF;IACA,MAAML,UAAU,CAAC,CAAC;EACpB,CAAC,EACD,CAACD,iBAAiB,CACpB,CAAC;EAED,IAAID,YAAY,KAAK,IAAI,EAAE;IACzB,oBAAOJ,OAAA;MAAKa,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjE;EAEA,oBACElB,OAAA;IAAK,eAAY,uBAAuB;IAAAc,QAAA,EACrCV,YAAY,CAACe,GAAG,CAAEC,WAAW,iBAC5BpB,OAAA,CAACF,eAAe;MAEdsB,WAAW,EAAEA,WAAY;MACzBb,OAAO,EAAEA,OAAQ;MACjBC,sBAAsB,EAAEA;IAAuB,GAH1CY,WAAW,CAACC,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIpB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAAf,EAAA,CAjCYF,YAAmC;EAAA,QACKJ,cAAc;AAAA;AAAAyB,EAAA,GADtDrB,YAAmC;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}