{"ast":null,"code":"import { getEmployees, getTransactionsPaginated, getTransactionsByEmployee, setTransactionApproval } from \"./requests\";\nconst timeout = getTimeout();\nconst mockTimeout = 1 * timeout;\nexport function fakeFetch(endpoint, params) {\n  console.log(\"i go tcalled\");\n  return new Promise((resolve, reject) => {\n    mockApiLogger({\n      message: \"Loading request\",\n      data: {\n        endpoint,\n        params\n      },\n      type: \"info\"\n    });\n    let result;\n    try {\n      switch (endpoint) {\n        case \"employees\":\n          result = getEmployees();\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout);\n          break;\n        case \"paginatedTransactions\":\n          result = getTransactionsPaginated(params);\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout * 2.5);\n          break;\n        case \"transactionsByEmployee\":\n          result = getTransactionsByEmployee(params);\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout * 1.5);\n          break;\n        case \"setTransactionApproval\":\n          result = setTransactionApproval(params);\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout * 1);\n          break;\n        default:\n          throw new Error(\"Invalid endpoint\");\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        mockApiLogger({\n          message: error.message,\n          data: {\n            endpoint,\n            params\n          },\n          type: \"error\"\n        });\n        reject(error.message);\n      }\n    }\n  });\n}\nfunction mockApiLogger(_ref) {\n  let {\n    data,\n    message = \"Success request\",\n    type = \"success\"\n  } = _ref;\n  if (process.env.REACT_APP_MOCK_REQUEST_LOGS_ENABLED === \"false\") {\n    return;\n  }\n  console.log(`%c--Fake Request Debugger-- %c${message}`, \"color: #717171\", getTitleColor());\n  console.log(data);\n  function getTitleColor() {\n    if (type === \"error\") {\n      return \"color: #d93e3e;\";\n    }\n    if (type === \"info\") {\n      return \"color: #1670d2;\";\n    }\n    return \"color: #548a54;\";\n  }\n}\nfunction getTimeout() {\n  var _ref2, _URL$searchParams$get;\n  const timeout = parseInt((_ref2 = (_URL$searchParams$get = new URL(document.location).searchParams.get(\"timeout\")) !== null && _URL$searchParams$get !== void 0 ? _URL$searchParams$get : process.env.REACT_APP_TIMEOUT_MULTIPLIER) !== null && _ref2 !== void 0 ? _ref2 : \"1000\");\n  if (Number.isNaN(timeout)) {\n    return 1000;\n  }\n  return timeout;\n}","map":{"version":3,"names":["getEmployees","getTransactionsPaginated","getTransactionsByEmployee","setTransactionApproval","timeout","getTimeout","mockTimeout","fakeFetch","endpoint","params","console","log","Promise","resolve","reject","mockApiLogger","message","data","type","result","setTimeout","Error","error","_ref","process","env","REACT_APP_MOCK_REQUEST_LOGS_ENABLED","getTitleColor","_ref2","_URL$searchParams$get","parseInt","URL","document","location","searchParams","get","REACT_APP_TIMEOUT_MULTIPLIER","Number","isNaN"],"sources":["C:/Users/Yuska/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/utils/fetch.ts"],"sourcesContent":["import {\n  getEmployees,\n  getTransactionsPaginated,\n  getTransactionsByEmployee,\n  setTransactionApproval,\n} from \"./requests\"\nimport { PaginatedRequestParams, RequestByEmployeeParams, SetTransactionApprovalParams } from \"./types\"\n\nconst timeout = getTimeout()\nconst mockTimeout = 1 * timeout\n\nexport function fakeFetch<TData, TParams extends object = object>(\n  endpoint: RegisteredEndpoints,\n  params?: TParams\n): Promise<TData> {\n\n  console.log(\"i go tcalled\")\n\n  return new Promise((resolve, reject) => {\n    mockApiLogger({\n      message: \"Loading request\",\n      data: { endpoint, params },\n      type: \"info\",\n    })\n\n    let result: TData\n\n    try {\n      switch (endpoint) {\n        case \"employees\":\n          result = getEmployees() as unknown as TData\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } })\n            resolve(result)\n          }, mockTimeout)\n          break\n\n        case \"paginatedTransactions\":\n          result = getTransactionsPaginated(params as PaginatedRequestParams) as unknown as TData\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } })\n            resolve(result)\n          }, mockTimeout * 2.5)\n          break\n\n        case \"transactionsByEmployee\":\n          result = getTransactionsByEmployee(params as RequestByEmployeeParams) as unknown as TData\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } })\n            resolve(result)\n          }, mockTimeout * 1.5)\n          break\n\n        case \"setTransactionApproval\":\n          result = setTransactionApproval(params as SetTransactionApprovalParams) as unknown as TData\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } })\n            resolve(result)\n          }, mockTimeout * 1)\n          break\n\n        default:\n          throw new Error(\"Invalid endpoint\")\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        mockApiLogger({\n          message: error.message,\n          data: { endpoint, params },\n          type: \"error\",\n        })\n        reject(error.message)\n      }\n    }\n  })\n}\n\nfunction mockApiLogger({\n  data,\n  message = \"Success request\",\n  type = \"success\",\n}: {\n  message?: string\n  data: object\n  type?: \"success\" | \"error\" | \"info\"\n}) {\n  if (process.env.REACT_APP_MOCK_REQUEST_LOGS_ENABLED === \"false\") {\n    return\n  }\n\n  console.log(`%c--Fake Request Debugger-- %c${message}`, \"color: #717171\", getTitleColor())\n  console.log(data)\n\n  function getTitleColor() {\n    if (type === \"error\") {\n      return \"color: #d93e3e;\"\n    }\n\n    if (type === \"info\") {\n      return \"color: #1670d2;\"\n    }\n\n    return \"color: #548a54;\"\n  }\n}\n\nfunction getTimeout() {\n  const timeout = parseInt(\n    new URL(document.location as unknown as URL).searchParams.get(\"timeout\") ??\n      process.env.REACT_APP_TIMEOUT_MULTIPLIER ??\n      \"1000\"\n  )\n\n  if (Number.isNaN(timeout)) {\n    return 1000\n  }\n\n  return timeout\n}\n\nexport type RegisteredEndpoints =\n  | \"employees\"\n  | \"paginatedTransactions\"\n  | \"transactionsByEmployee\"\n  | \"setTransactionApproval\"\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}